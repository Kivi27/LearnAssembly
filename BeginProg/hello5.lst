     1                                  %include "stud_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> 
     8                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     9                              <1> ;; system dependend part
    10                              <1> 
    11                              <1> ; generic 3-param syscall
    12                              <1> %macro _syscall_3 4
    13                              <1> 	push edx
    14                              <1> 	push ecx
    15                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    16                              <1> 	push %1
    17                              <1> 	push %2
    18                              <1> 	push %3
    19                              <1> 	push %4
    20                              <1> 	pop edx
    21                              <1> 	pop ecx
    22                              <1> 	pop ebx
    23                              <1> 	pop eax
    24                              <1> 	int 0x80
    25                              <1> 	pop ebx
    26                              <1> 	pop ecx
    27                              <1> 	pop edx
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    31                              <1> %macro _syscall_exit 1
    32                              <1> 	mov ebx, %1	; exit code
    33                              <1> 	mov eax, 1	; 1 = sys_exit
    34                              <1> 	int 0x80
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> ;; system dependent part ends here
    38                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                              <1> 
    40                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    41                              <1> ; output: eax: read bytes
    42                              <1> %macro _syscall_read 3
    43                              <1> 	_syscall_3 3,%1,%2,%3
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    47                              <1> ; output: eax: written bytes
    48                              <1> %macro _syscall_write 3
    49                              <1> 	_syscall_3 4,%1,%2,%3
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    53                              <1> %macro 	PRINT 1
    54                              <1> 	pusha
    55                              <1> 	pushf
    56                              <1> 	jmp %%astr
    57                              <1> %%str	db	%1, 0
    58                              <1> %%strln	equ	$-%%str
    59                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    60                              <1> 	popf
    61                              <1> 	popa
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    65                              <1> %macro	PUTCHAR 1
    66                              <1> 	pusha
    67                              <1> 	pushf
    68                              <1> %ifstr %1
    69                              <1> 	mov	al, %1
    70                              <1> %elifnum %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifidni %1,al
    73                              <1> 	nop
    74                              <1> %elifidni %1,ah
    75                              <1> 	mov	al, ah
    76                              <1> %elifidni %1,bl
    77                              <1> 	mov	al, bl
    78                              <1> %elifidni %1,bh
    79                              <1> 	mov	al, bh
    80                              <1> %elifidni %1,cl
    81                              <1> 	mov	al, cl
    82                              <1> %elifidni %1,ch
    83                              <1> 	mov	al, ch
    84                              <1> %elifidni %1,dl
    85                              <1> 	mov	al, dl
    86                              <1> %elifidni %1,dh
    87                              <1> 	mov	al, dh
    88                              <1> %else
    89                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    90                              <1> %endif
    91                              <1> 	sub	esp, 2  ; reserve memory for buffer
    92                              <1> 	mov	edi, esp
    93                              <1> 	mov	[edi], al
    94                              <1> 	_syscall_write 1, edi, 1
    95                              <1> 	add	esp, 2
    96                              <1> 	popf
    97                              <1> 	popa
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101                              <1> %macro	GETCHAR 0
   102                              <1> 	pushf
   103                              <1> 	push	edi
   104                              <1> 	sub	esp, 2
   105                              <1> 	mov	edi, esp
   106                              <1> 	_syscall_read 0, edi, 1
   107                              <1> 	cmp	eax, 1
   108                              <1> 	jne	%%eof_reached
   109                              <1> 	xor	eax,eax
   110                              <1> 	mov	al, [edi]
   111                              <1> 	jmp	%%gcquit
   112                              <1> %%eof_reached:
   113                              <1> 	xor	eax, eax
   114                              <1> 	not	eax 		; eax := -1
   115                              <1> %%gcquit:
   116                              <1> 	add	esp, 2
   117                              <1> 	pop	edi
   118                              <1> 	popf
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   122                              <1> %macro FINISH 0-1 0
   123                              <1> 	_syscall_exit %1
   124                              <1> %endmacro
   125                              <1> 
     2                                  global _start
     3                                  
     4                                  section .text
     5 00000000 B800000000              _start: mov eax, 0
     6                                  again:  PRINT "Hello####"
     6                              <1> again: 
     6 00000005 60                  <1>  pusha
     6 00000006 9C                  <1>  pushf
     6 00000007 EB0A                <1>  jmp %%astr
     6 00000009 48656C6C6F23232323- <1> %%str db %1, 0
     6 00000012 00                  <1>
     6                              <1> %%strln equ $-%%str
     6                              <1> %%astr: _syscall_write 1, %%str, %%strln
     6                              <2> ..@2.astr: 
     6                              <2>  _syscall_3 4,%1,%2,%3
     6 00000013 52                  <3>  push edx
     6 00000014 51                  <3>  push ecx
     6 00000015 53                  <3>  push ebx
     6 00000016 6A04                <3>  push %1
     6 00000018 6A01                <3>  push %2
     6 0000001A 68[09000000]        <3>  push %3
     6 0000001F 6A0A                <3>  push %4
     6 00000021 5A                  <3>  pop edx
     6 00000022 59                  <3>  pop ecx
     6 00000023 5B                  <3>  pop ebx
     6 00000024 58                  <3>  pop eax
     6 00000025 CD80                <3>  int 0x80
     6 00000027 5B                  <3>  pop ebx
     6 00000028 59                  <3>  pop ecx
     6 00000029 5A                  <3>  pop edx
     6 0000002A 9D                  <1>  popf
     6 0000002B 61                  <1>  popa
     7                                          PUTCHAR 10
     7 0000002C 60                  <1>  pusha
     7 0000002D 9C                  <1>  pushf
     7                              <1> %ifstr %1
     7                              <1>  mov al, %1
     7                              <1> %elifnum %1
     7 0000002E B00A                <1>  mov al, %1
     7                              <1> %elifidni %1,al
     7                              <1>  nop
     7                              <1> %elifidni %1,ah
     7                              <1>  mov al, ah
     7                              <1> %elifidni %1,bl
     7                              <1>  mov al, bl
     7                              <1> %elifidni %1,bh
     7                              <1>  mov al, bh
     7                              <1> %elifidni %1,cl
     7                              <1>  mov al, cl
     7                              <1> %elifidni %1,ch
     7                              <1>  mov al, ch
     7                              <1> %elifidni %1,dl
     7                              <1>  mov al, dl
     7                              <1> %elifidni %1,dh
     7                              <1>  mov al, dh
     7                              <1> %else
     7                              <1>  mov al, %1
     7                              <1> %endif
     7 00000030 83EC02              <1>  sub esp, 2
     7 00000033 89E7                <1>  mov edi, esp
     7 00000035 8807                <1>  mov [edi], al
     7                              <1>  _syscall_write 1, edi, 1
     7                              <2>  _syscall_3 4,%1,%2,%3
     7 00000037 52                  <3>  push edx
     7 00000038 51                  <3>  push ecx
     7 00000039 53                  <3>  push ebx
     7 0000003A 6A04                <3>  push %1
     7 0000003C 6A01                <3>  push %2
     7 0000003E 57                  <3>  push %3
     7 0000003F 6A01                <3>  push %4
     7 00000041 5A                  <3>  pop edx
     7 00000042 59                  <3>  pop ecx
     7 00000043 5B                  <3>  pop ebx
     7 00000044 58                  <3>  pop eax
     7 00000045 CD80                <3>  int 0x80
     7 00000047 5B                  <3>  pop ebx
     7 00000048 59                  <3>  pop ecx
     7 00000049 5A                  <3>  pop edx
     7 0000004A 83C402              <1>  add esp, 2
     7 0000004D 9D                  <1>  popf
     7 0000004E 61                  <1>  popa
     8 0000004F 40                      	inc eax
     9 00000050 83F80A                  	cmp eax, 10
    10 00000053 7CB0                    	jl again
    11                                  	FINISH
    11                              <1>  _syscall_exit %1
    11 00000055 BB00000000          <2>  mov ebx, %1
    11 0000005A B801000000          <2>  mov eax, 1
    11 0000005F CD80                <2>  int 0x80
    12                                  
